--1 - Generar una función que retorne cuantos años tiene una persona.

CREATE OR REPLACE FUNCTION 
EDAD_FTC(PERSONA PERSONS.PERSONS_ID%TYPE)
RETURN VARCHAR
IS
VAR_BIRTHDAY DATE;
FECHA_ACTUAL DATE;
EDAD NUMBER(2);
BEGIN
SELECT BIRTHDATE INTO VAR_BIRTHDAY FROM PERSONS WHERE PERSONS_ID= PERSONA ;
FECHA_ACTUAL:=SYSDATE;
EDAD:= (FECHA_ACTUAL-VAR_BIRTHDAY)/365;
RETURN 'ID_PERSONA: '||PERSONA||' |EDAD: ' ||EDAD;
END;

SELECT EDAD_FTC(319) FROM DUAL;



/*2 - los niños y viejos y enfermos no pueden trabajar en la mina. por ello cree un trigger que
sea capaz de garantizar que ningún empleado viole esas restricciones.
Nota: niño es considerado inferior a 12 años y un viejo es alguien mayor de 70 años
Recuerda que no se admiten personas enfermas.*/

CREATE OR REPLACE TRIGGER TR_REST_MINA
BEFORE INSERT OR UPDATE ON workers for each row
declare
var_edad_persona date;
fecha_actual date;
edad number(2);
VAR_ESTADO NUMBER;
BEGIN
select birthdate into var_edad_persona from persons where persons_id=:new.persons_id;
SELECT DIAGNOSTICS_ID INTO VAR_ESTADO FROM PERSONS_MEDICAL_CHECK WHERE PERSONS_ID=:NEW.PERSONS_ID;
fecha_actual:=sysdate;
EDAD:= (FECHA_ACTUAL-VAR_edad_persona)/365;
CASE
WHEN edad<12 OR EDAD>70 then
RAISE_APPLICATION_ERROR(-20001,'En la mina no se permiten niños ni ancianos');

WHEN VAR_ESTADO !=1 THEN
RAISE_APPLICATION_ERROR(-20001,'En la mina no se permiten enfermos o con deficiencias');
end CASE;
end;


--3 - Cree un procedimiento que registre un trabajador. tabla: workers Nota: validar que la
--persona exista antes de registrar como trabajador

CREATE OR REPLACE PROCEDURE registrar_worker(
var_workers_id workers.workers_id%TYPE,
var_mines_id workers.mines_id%TYPE,
var_persons_id workers.persons_id%TYPE
)
AS
var_val_id NUMBER;
BEGIN
SELECT COUNT(*) INTO var_val_id FROM persons WHERE persons_id = var_persons_id;
IF var_val_id = 0 THEN
    raise_application_error(-20001,'No existe la persona en la base de datos.');
ELSE
    INSERT INTO workers VALUES (var_workers_id, var_mines_id, var_persons_id, sysdate);
    dbms_output.put_line('Registrado Correctamente');    
END IF;
END;

EXECUTE registrar_worker(2436780,2,24398);



/*4 - crear un cursor que muestre el id, nombre, apellido, fecha de nacimiento de todas las
mujeres que trabajan en una mina, la mina debe ser indicada por entrada de teclado*/

CREATE OR REPLACE PROCEDURE PRC_4
(MINA MINES.MINE_NAME%TYPE )
AS
BEGIN
FOR I IN(SELECT P.PERSONS_ID AS PER_, P.NAME AS NAME_, P.LASTNAME AS LAST_, P.BIRTHDATE AS BIRTH_
FROM PERSONS P 
INNER JOIN WORKERS W ON P.PERSONS_ID = W.PERSONS_ID 
INNER JOIN MINES M ON W.MINES_ID = M.MINES_ID 
WHERE LOWER(M.MINE_NAME) = LOWER(MINA) AND P.SEX = 'F') LOOP
DBMS_OUTPUT.PUT_LINE('ID_MUJER: '||I.PER_||' |NOMBRE: '||I.NAME_||' |APELLIDOS: '||I.LAST_||' |FECHA_NACIMIENTO: '||I.BIRTH_);
END LOOP;
END;

EXECUTE PRC_4('&mina')


--5 - crear una función que retorne si un trabajador está vivo o muerto.


create or replace function vivo_o_muerto(TRABAJADOR WORKERS.WORKERS_ID%TYPE)
return VARCHAR2
is
  var_1 NUMBER;
  var_boolean boolean;
BEGIN
  BEGIN
  var_boolean:=true;
SELECT PD.PERSONS_ID  INTO VAR_1 FROM PERSONS_DEFUNTIONS PD INNER JOIN WORKERS W ON PD.PERSONS_ID = W.PERSONS_ID WHERE PD.PERSONS_ID = TRABAJADOR;
   return 'LATIMOSAMENTE EL TRABAJADOR CON ID: '||TRABAJADOR||' YA ESTÁ MAS MUERTO QUE EL BARCELONA';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      var_boolean:=false;
      return 'EL TRABAJADOR CON ID: '||TRABAJADOR||' ESTÁ REEVIVO ESE HPTA 
|| TAMBIEN ES POSIBLE QUE ESE MALPARIDO NO HAYA TRABAJADO NUNCA EN LAS MINAS';
  END;
END;


SELECT vivo_o_muerto(6257) from dual;



//6 - crear una función que retorne la cantidad de kilos que produce de una mina.

CREATE OR REPLACE FUNCTION kg_mina(mina mines.mine_name%type)
return varchar
is
var_1 varchar(300);
kgs number;
begin
SELECT SUM(pw.KG_PRODUCT)as kgs into kgs FROM PRODUCT_WORKER pw inner join mines m on pw.PRODUCTS_ID= m.PRODUCTS_ID and LOWER(m.mine_name)=LOWER(mina)
GROUP BY m.mine_name;
return 'MINA: '||MINA||' |KILOGRAMOS TOTALES MINADOS: '||KGS||'KG';
end;

select kg_mina('&ESCOJA_LA_MINA') from dual;



/* 7
Generar un CURSOR de trabajadores que muestre:
id, nombre, apellido, sexo, edad
de todos los menores de edad que han muerto.*/

DECLARE
CURSOR cur_07 IS
SELECT P.persons_id AS ID, P.NAME AS nombre, P.lastname AS apellido,P.sex AS sexo,(sysdate - P.birthdate)/365 AS edad FROM persons P
INNER JOIN persons_defuntions pf ON pf.persons_id = P.persons_id
WHERE (sysdate - P.birthdate) <= 6570 ;

BEGIN
FOR I IN cur_07 LOOP
dbms_output.put_line('ID: ' || I.ID ||'  NOMBRE: ' || I.nombre || ' APELLIDO: ' || I.apellido ||'  SEXO: ' || I.sexo || ' EDAD: ' || I.edad );
 END LOOP;
END;



// 8  Generar un procedimiento que dando el nombre una mina que se ingresa por teclado
//retorne la cantidad de trabajadores infectados con VIH.

CREATE OR REPLACE PROCEDURE PRC_8
(MINA MINES.MINE_NAME%TYPE )
AS
CANTVIH NUMBER;
BEGIN
SELECT COUNT (*) INTO CANTVIH
FROM PERSONS P 
INNER JOIN PERSONS_MEDICAL_CHECK PMC ON P.PERSONS_ID = PMC.PERSONS_ID
INNER JOIN WORKERS W ON P.PERSONS_ID = W.PERSONS_ID 
INNER JOIN MINES M ON W.MINES_ID = M.MINES_ID 
WHERE LOWER(M.MINE_NAME) = LOWER(MINA) AND PMC.DIAGNOSTICS_ID = 3;
DBMS_OUTPUT.PUT_LINE('LA CANTIDAD DE PACIENTES CON VIH EN LA MINA: '||MINA|| ' ES DE: ' ||CANTVIH);

END;

EXECUTE PRC_8('&mina')



--9 - Cree un procedimiento que muestre el mejor trabajador de cada mina.
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mejor_worker
AS
var_persona VARCHAR(200);
BEGIN
FOR I IN (
SELECT m1.mine_name AS mina, q1.persons_id AS persona, MAX(q1.suma) AS kg_recolectados
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  q1
INNER JOIN (
SELECT mine_name, MAX(suma) AS max_suma
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  
GROUP BY mine_name
)  m1 ON q1.mine_name = m1.mine_name AND q1.suma = m1.max_suma
GROUP BY m1.mine_name, q1.persons_id
) LOOP
SELECT NAME INTO var_persona FROM persons WHERE PERSONS_ID= I.persona;
DBMS_OUTPUT.PUT_LINE('NOMBRE: '||var_persona||' |ID: '||I.persona||' |FUE EL MEJOR TRABAJADOR DE LA MINA DE '||UPPER(I.mina)||' |RECOLECTÓ: '||I.kg_recolectados||'KG DE LOS PRODUCTOS');
END LOOP;
END;

EXECUTE mejor_worker();
